{"version":3,"file":"login.bundle.js","mappings":";;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,QAAQ;AACR;AACA,6CAA6C,aAAa,EAAE,gBAAgB;AAC5E;AACA,QAAQ;AACR;AACA,sCAAsC,aAAa,EAAE,gBAAgB;AACrE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;ACjEwC;;AAExC;;AAEO;AACP;AACA,gDAAgD,iBAAiB;AACjE,8CAA8C,kBAAkB;AAChE,8CAA8C,gBAAgB;AAC9D,yBAAyB,KAAK,GAAG,GAAG,GAAG,GAAG;;AAE1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP,6BAA6B,aAAa;AAC1C;;AAEA;AACO;AACP;AACA,IAAI,qDAAU;AACd,IAAI,qDAAU;AACd,IAAI,qDAAU;AACd;AACA;;AAEA;;AAEO;AACP;AACA;AACA;;AAEA;;AAEA;AACA,GAAG;AACH;;AAEO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA,sBAAsB,cAAc,GAAG,cAAc,GAAG,cAAc;AACtE,sBAAsB,cAAc,GAAG,cAAc,GAAG,cAAc;;AAEtE;;AAEA;AACA;;AAEA;;AAEO;AACP;AACA;;;;;;;UCnGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;ACNoD;;AAEpD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,IAAI;;AAEP,uBAAuB,gEAAwB;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack://webpack-starter-kit/./src/apiCalls.js","webpack://webpack-starter-kit/./src/model.js","webpack://webpack-starter-kit/webpack/bootstrap","webpack://webpack-starter-kit/webpack/runtime/define property getters","webpack://webpack-starter-kit/webpack/runtime/hasOwnProperty shorthand","webpack://webpack-starter-kit/webpack/runtime/make namespace object","webpack://webpack-starter-kit/./src/login/login.js"],"sourcesContent":["export function getAPIData(url) {\n  return fetch(url)\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      if (res.status >= 500) {\n        throw new Error(\"There's been a network error: \");\n      }\n    })\n    .then(data => data)\n    .catch(err => console.log(err));\n}\n\nexport function postFlightRequest(\n  url,\n  previousTripID,\n  userID,\n  destinationID,\n  travelers,\n  date,\n  duration,\n) {\n  return fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      id: previousTripID + 1,\n      userID,\n      destinationID,\n      travelers,\n      date,\n      duration,\n      status: 'pending',\n      suggestedActivities: [],\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then(resp => {\n      if (resp.ok) {\n        return resp.json();\n      }\n\n      if (resp.status === 400) {\n        throw new Error('There has been a user error.');\n      } else if (resp.status === 422 || resp.status === 404) {\n        throw new Error(\n          'The POST request is missing some information.',\n        );\n      } else if (resp.status >= 500) {\n        throw new Error(\n          `There has been a network error: ${resp.status} ${resp.statusText}. Please refresh the page or try again later.`,\n        );\n      } else {\n        throw new Error(\n          `There has been an error: ${resp.status} ${resp.statusText}.`,\n        );\n      }\n    })\n    .then(data => data)\n    .catch(err => {\n      console.error(err);\n    });\n}\n","import { getAPIData } from './apiCalls';\n\n/* -------------- Trips -------------- */\n\nexport function filterTrips(tripData, criteria, travelerID, year = '2023') {\n  const date = new Date();\n  const yyyy = date.toLocaleString('default', { year: 'numeric' });\n  const mm = date.toLocaleString('default', { month: '2-digit' });\n  const dd = date.toLocaleString('default', { day: '2-digit' });\n  const currentDate = `${yyyy}/${mm}/${dd}`;\n\n  tripData = tripData.filter(trip => trip.userID === travelerID);\n\n  switch (criteria) {\n    case 'byYear':\n      return tripData.filter(trip => trip.date.slice(0, 4) === year);\n    case 'past':\n      return tripData.filter(\n        trip => trip.date < currentDate && trip.status !== 'pending',\n      );\n    case 'upcoming':\n      return tripData.filter(\n        trip => trip.date > currentDate && trip.status === 'approved',\n      );\n    case 'pending':\n      return tripData.filter(trip => trip.status === 'pending');\n    default:\n      return tripData;\n  }\n}\n\nexport function findDestinationByID(destinations, destID) {\n  return destinations.find(dest => dest.id === destID);\n}\n\nexport function findIDByDestination(destinations, destName) {\n  const destinationNames = getDestinationNames(destinations);\n  if (!destinationNames.includes(destName)) {\n    return false;\n  }\n\n  return destinations.find(dest => dest.destination === destName).id;\n}\n\nexport function getDestinationNames(destinations) {\n  return destinations.map(({ destination }) => destination);\n}\n\n/* -------------- Generic Fetch Call -------------- */\nexport function getAllAPIData() {\n  return Promise.all([\n    getAPIData('http://localhost:3001/api/v1/travelers'),\n    getAPIData('http://localhost:3001/api/v1/trips'),\n    getAPIData('http://localhost:3001/api/v1/destinations'),\n  ]).then(values => values);\n}\n\n/* -------------- Calculation -------------- */\n\nexport function calcTotalSpentByYear(userID, trips, destinations, year) {\n  return filterTrips(trips, 'byYear', userID, year).reduce((acc, trip) => {\n    const destination = findDestinationByID(destinations, trip.destinationID);\n    const total = calcTotalCostOfTrip(trip, destination);\n\n    acc += total;\n\n    return acc;\n  }, 0);\n}\n\nexport function calcTotalCostOfTrip(trip, destination) {\n  const flightCost =\n    trip.travelers * (destination.estimatedFlightCostPerPerson * 2);\n\n  const lodgingCost =\n    trip.duration * destination.estimatedLodgingCostPerDay * trip.travelers;\n  const subTotal = flightCost + lodgingCost;\n  const agentFee = subTotal * 0.1;\n\n  return subTotal + agentFee;\n}\n\nexport function calcTimeDifference(date1, date2) {\n  // Dates are passed in in the format yyyy-mm-dd\n  const splitDate1 = date1.split('-');\n  const splitDate2 = date2.split('-');\n  // Date object needs date format to be mm/dd/yyyy\n  date1 = new Date(`${splitDate1[1]}/${splitDate1[2]}/${splitDate1[0]}`);\n  date2 = new Date(`${splitDate2[1]}/${splitDate2[2]}/${splitDate2[0]}`);\n\n  const diffInMs = Math.abs(date1 - date2);\n\n  return diffInMs / (1000 * 60 * 60 * 24);\n}\n\n/* -------------- Login -------------- */\n\nexport function validateLoginCredentials(username, password) {\n  return username.slice(0, 8) === 'traveler' && password === 'travel';\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { validateLoginCredentials } from '../model';\n\n// Query Selectors\n\nconst loginForm = document.querySelector('#login-form');\n\nloginForm.onsubmit = e => {\n  e.preventDefault();\n\n  const formData = new FormData(loginForm);\n  const loginData = [...formData.entries()].reduce((acc, input) => {\n    acc[input[0]] = input[1];\n    return acc;\n  }, {});\n\n  const loginIsValid = validateLoginCredentials(\n    loginData.username,\n    loginData.password,\n  );\n\n  if (loginIsValid) {\n    localStorage.setItem('currentUserID', loginData.username.slice(8));\n    window.location.href = 'home.html';\n  }\n};\n\n// use localStorage user id where needed and then it's on to building the confirmation page\n"],"names":[],"sourceRoot":""}